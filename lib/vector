#!/bin/sh

if ! [ -f ./clash ]; then
  echo 'Could not locate clash'
  exit 1
fi >&2

. ./clash

class Vector_node \
  value           \

class Vector     \
  length_        \
  _append        \
  _clear         \
  _filter        \
  _find          \
  _foreach       \
  _get           \
  _index         \
  _insert        \
  _pop           \
  _pretty_print  \
  _print         \
  _remove        \
  _set           \
  _new_node_     \
  _shift_left_   \
  _shift_right_  \

check_index_within_range() {
  # 1 -> index
  # 2 -> length
  if [ -z "$1" ] ||
     [ "$1" -ge "$2" ] ||
     [ "$1" -le -"$2" ]
  then
    printf 'Invalid index: %s\n' "$1"
    return 1
  fi >&2
}

get_positive_index() {
  if [ "$1" -lt 0 ]; then
    printf %s "$((length_ + $1))"
  else
    printf %s "${1#-}" # remove - sign from -0
  fi
}

Vector_append() {
  "$local" value
  for value do
    "$self"_new_node_ "$value"
  done
}

Vector_clear() {
  "$local" index=0
  while [ "$index" -lt "$length_" ]; do
    del "$self"_Vector_node_"$index"
    index="$((index + 1))"
  done
  "$self"_length__is 0
}

Vector_filter() {
  "$local" new_vector="$1"
  shift
  Vector "$new_vector"
  "$local" index=0
  "$local" node_value
  while [ "$index" -lt "$length_" ]; do
    node_value="$("$self"_Vector_node_"$index"_value; printf x)"
    node_value="${node_value%x}"
    if "$@" "$node_value"; then
      "$new_vector"_append "$node_value"
    fi
    index="$((index + 1))"
  done
}

# Find a value matching a given predicate
Vector_find() {
  "$local" index=0
  "$local" node_value
  while [ "$index" -lt "$length_" ]; do
    node_value="$("$self"_Vector_node_"$index"_value; printf x)"
    node_value="${node_value%x}"
    if "$@" "$node_value"; then
      printf %s "$node_value"
      return 0
    fi
    index="$((index + 1))"
  done
  return 1
}

Vector_foreach() {
  "$local" index=0
  "$local" node_value
  while [ "$index" -lt "$length_" ]; do
    node_value="$("$self"_Vector_node_"$index"_value; printf x)"
    node_value="${node_value%x}"
    "$@" "$node_value"
    index="$((index + 1))"
  done
}

Vector_get() {
  check_index_within_range "$1" "$length_" || return
  "$local" target_index="$(get_positive_index "$1")"
  "$local" value="$("$self"_Vector_node_"$target_index"_value; printf x)"
  value="${value%x}"
  printf %s "$value"
}

Vector_index() {
  "$local" index=0
  "$local" value
  while [ "$index" -lt "$length_" ]; do
    if [ "$("$self"_Vector_node_"$index"_value; printf x)" = "$1"x ]; then
      printf %s "$index"
      return 0
    fi
    index="$((index + 1))"
  done
  printf 'Value not found: %s\n' "$1" >&2
  return 1
}

Vector_insert() {
  check_index_within_range "$1" "$((length_ + 1))" || return
  "$local" target_index="$(get_positive_index "$1")"
  "$local" value="$("$self"_Vector_node_"$target_index"_value; printf x)"
  "$self"_shift_right_ "$target_index"
  "$self"_Vector_node_"$target_index"_value_is "$2"
}

Vector_pop() {
  set -- "${1-0}"
  check_index_within_range "$1" "$length_" || return
  "$local" target_index="$(get_positive_index "$1")"
  "$local" value="$("$self"_Vector_node_"$target_index"_value; printf x)"
  "$local" value="$("$self"_Vector_node_"$target_index"_value; printf x)"
  value="${value%x}"
  "$self"_shift_left_ "$target_index"
  printf %s "$value"
}

Vector_pretty_print() {
  printf '== %s == (length: %s)\n' "$self" "$length_"
  "$local" index=0
  "$local" value
  while [ "$index" -lt "$length_" ]; do
    value="$("$self"_Vector_node_"$index"_value; printf x)"
    value="${value%x}"
    printf '%s: %s\n' "$index" "$value"
    index="$((index + 1))"
  done
}

Vector_print() {
  (
    node_printer() {
      "$local" OLD_PATH="$PATH"
      PATH=
      if ! PATH="$OLD_PATH" "$1"_print 2> /dev/null; then
        PATH="$OLD_PATH"
        printf '%s' "$1"
      fi
      PATH="$OLD_PATH"
      "$local" tmp="${IFS#?}"
      "$local" delim="${IFS%$tmp}" # IFS first char is the print delim, like "$*"
      printf %s "${delim:- }" # Use a space if IFS is unset
    }
    "$self"_foreach node_printer
  )
  echo
}

Vector_remove() {
  "$local" index="$("$self"_index "$1")" || return
  "$self"_shift_left_ "$index"
}

Vector_set() {
  check_index_within_range "$1" "$length_" || return
  "$local" target_index="$(get_positive_index "$1")"
  "$local" value="$("$self"_Vector_node_"$target_index"_value; printf x)"
  "$self"_Vector_node_"$target_index"_value_is "$2"
}

Vector_new_node_() {
  "$local" node_name="$self"_Vector_node_"$length_"
  Vector_node "$node_name" "$1"
  "$self"_length__is "$((length_ + 1))"
}

Vector_shift_left_() {
  "$local" index="$(($1 + 1))"
  "$local" value
  while [ "$index" -lt "$length_" ]; do
    value="$("$self"_Vector_node_"$index"_value; printf x)"
    "$self"_Vector_node_"$((index - 1))"_value_is "${value%x}"
    index="$((index + 1))"
  done
  "$self"_length__is "$((length_ - 1))"
  del "$self"_Vector_node_"$length_"
}

Vector_shift_right_() {
  "$local" index="$(($length_ - 1))"
  "$local" target_index="$1"
  "$local" value
  "$self"_append ''
  while [ "$index" -ge "$target_index" ]; do
    value="$("$self"_Vector_node_"$index"_value; printf x)"
    "$self"_Vector_node_"$((index + 1))"_value_is "${value%x}"
    index="$((index - 1))"
  done
  "$self"_length__is "$((length_ + 1))"
}

_Vector() {
  shift # name
  "$self"_length__is 0
  "$self"_append "$@"
}
