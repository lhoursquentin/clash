#!/bin/sh

# shebang for coloration, this should only be sourced

if ! [ -f "${CLASH_ROOT-.}"/clash ]; then
  echo 'Could not locate clash'
  exit 1
fi >&2

# TODO could save some iterations by making use of the double link properties

# List_node is also used by dict
class List_node \
  value         \
  next          \
  previous      \

class List_view  \
  length         \
  head_          \
  tail_          \
  _sort          \

List_view_sort() {
  List_sort
}

class List       \
  length         \
  head_          \
  tail_          \
  _append        \
  _clear         \
  _clone         \
  _concat        \
  _filter        \
  _find          \
  _foreach       \
  _get           \
  _index         \
  _insert        \
  _is_empty      \
  _map           \
  _pop           \
  _pretty_print  \
  _print         \
  _reduce        \
  _remove        \
  _remove_if     \
  _set           \
  _sort          \
  _append_node_  \
  _remove_node_  \
  __del__        \
  __init__       \

check_index_within_range() {
  # 1 -> index
  # 2 -> length
  if [ -z "$1" ] ||
     [ "$1" -ge "$2" ] ||
     [ "$1" -le -"$2" ]
  then
    printf 'Invalid index: %s\n' "$1"
    return 1
  fi >&2
}

get_positive_index() {
  if [ "$1" -lt 0 ]; then
    printf %s "$((length + $1))"
  else
    printf %s "${1#-}" # remove - sign from -0
  fi
}

List_append() {
  local node_id=
  for value do
    node_id="$(List_node_anonymous_id)"
    List_node "$node_id" "$value"
    "$self"_append_node_ "$node_id"
  done
}

List_clear() {
  local index=0
  local node="$head_"
  local next=
  while [ "$index" -lt "$length" ]; do
    next="$("$node"_next)"
    del "$node"
    node="$next"
    index="$((index + 1))"
  done
  "$self"_head__is ''
  "$self"_tail__is ''
  "$self"_length_is 0
}

List_clone() {
  List "$1"
  "$self"_foreach "$1"_append
}

List_concat() {
  for list do
    "$list"_foreach "$self"_append
  done
}

List_filter() {
  local new_list="$1"
  shift
  List "$new_list"
  local index=0
  local node="$head_"
  local node_value=
  while [ "$index" -lt "$length" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    if "$@" "$node_value"; then
      "$new_list"_append "$node_value"
    fi
    node="$("$node"_next)"
    index="$((index + 1))"
  done
}

# Find a value matching a given predicate
List_find() {
  local index=0
  local node="$head_"
  local node_value=
  while [ "$index" -lt "$length" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    if "$@" "$node_value"; then
      printf %s "$node_value"
      return 0
    fi
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  return 1
}

List_foreach() {
  local index=0
  local node="$head_"
  local node_value=
  while [ "$index" -lt "$length" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    "$@" "$node_value"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
}

List_get() {
  check_index_within_range "$1" "$length" || return
  local target_index="$(get_positive_index "$1")"
  local index=0
  local node="$head_"
  while [ "$index" -lt "$target_index" ]; do
    node="$("$node"_next)"
    index="$((index + 1))"
  done

  local value="$("$node"_value; printf x)"
  value="${value%x}"
  printf %s "$value"
}

List_index() {
  local index=0
  local node="$head_"
  while [ "$index" -lt "$length" ]; do
    if [ "$("$node"_value; printf x)" = "$1"x ]; then
      printf %s "$index"
      return 0
    fi
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  printf 'Value not found: %s\n' "$1" >&2
  return 1
}

List_insert() {
  check_index_within_range "$1" "$((length + 1))" || return
  local target_index="$(get_positive_index "$1")"
  local index=0
  local node="$head_"
  local prev_node=
  while [ "$index" -lt "$target_index" ]; do
    prev_node="$node"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  local node_id="$(List_node_anonymous_id)"
  List_node "$node_id" "$2" "$node" "$prev_node"
  if [ -n "$prev_node" ]; then
    "$prev_node"_next_is "$node_id"
  fi
  if [ "$prev_node" = "$tail_" ]; then
    "$self"_tail__is "$node_id"
  elif [ "$node" = "$head_" ]; then
    "$self"_head__is "$node_id"
  fi
  "$self"_length_is "$((length + 1))"
}

List_is_empty() {
  [ "$length" -eq 0 ] || return
}

List_map() {
  local new_list="$1"
  shift
  List "$new_list"
  local index=0
  local node="$head_"
  local node_value=
  local new_value=
  while [ "$index" -lt "$length" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    new_value="$("$@" "$node_value"; printf x)"
    new_value="${new_value%x}"
    "$new_list"_append "$new_value"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
}

List_pop() {
  set -- "${1-0}"
  check_index_within_range "$1" "$length" || return
  local target_index="$(get_positive_index "$1")"
  local index=0
  local node="$head_"
  while [ "$index" -lt "$target_index" ]; do
    node="$("$node"_next)"
    index="$((index + 1))"
  done

  local value="$("$node"_value; printf x)"
  value="${value%x}"
  "$self"_remove_node_ "$node"
  printf %s "$value"
}

List_pretty_print() {
  printf '== %s == (length: %s)\n' "$self" "$length"
  local index=0
  local node="$head_"
  local value=
  while [ "$index" -lt "$length" ]; do
    value="$("$node"_value; printf x)"
    value="${value%x}"
    printf '%s: %s\n' "$index" "$value"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
}

List_print() {
  if "$self"_is_empty; then
    return
  fi
  local index=0
  local node="$head_"
  local value=
  local delim=
  while true; do
    value="$("$node"_value; printf x)"
    value="${value%x}"
    # let's assume there's no binary called $1_print that could cause a false
    # positive, otherwise we could verify the output of command -v which
    # should be exactly "$1"_print (or just unset PATH)
    if command -v "$value"_print > /dev/null; then
      "$value"_print
    else
      printf %s "$value"
    fi
    if [ "$index" -eq "$((length - 1))" ]; then
      break
    fi
    if [ -z "${IFS+x}" ]; then
      delim=' ' # space delimiter if IFS is unset
    elif [ -n "$IFS" ]; then
      local tmp="${IFS#?}"
      delim="${IFS%$tmp}" # IFS first char is the print delim, like "$*"
    fi
    printf %s "$delim"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  echo
}

List_reduce() {
  if "$self"_is_empty; then
    printf '%s is empty, nothing to reduce\n' "$self"
    return 1
  fi >&2

  local node_value="$("$head_"_value; printf x)"
  local accumulated_value="${node_value%x}"
  local node="$("$head_"_next)"
  local index=1
  while [ "$index" -lt "$length" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    accumulated_value="$("$@" "$accumulated_value" "$node_value"; printf x)"
    accumulated_value="${accumulated_value%x}"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  printf %s "$accumulated_value"
}

List_remove() {
  if ! "$self"_remove_if test "$1" =; then
    printf 'Value not found: %s\n' "$1" >&2
    return 1
  fi
}

List_remove_if() {
  local index=0
  local node="$head_"
  local node_value=
  local prev_node="$head_"
  while [ "$index" -lt "$length" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    if "$@" "$node_value"; then
      "$self"_remove_node_ "$node"
      return
    fi
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  return 1
}

List_set() {
  check_index_within_range "$1" "$length" || return
  local target_index="$(get_positive_index "$1")"
  local index=0
  local node="$head_"
  while [ "$index" -lt "$target_index" ]; do
    node="$("$node"_next)"
    index="$((index + 1))"
  done

  "$node"_value_is "$2"
}

# Some kind of merge sort
# No new node is created, we make use of list "views"
List_sort() {
  if [ "$length" -eq 0 ] || [ "$length" -eq 1 ]; then
    return
  fi

  local mid_len="$((length / 2))"
  local index=1
  local node="$head_"
  while [ "$index" -lt "$mid_len" ]; do
    node="$("$node"_next)"
    index="$((index + 1))"
  done

  # Left and right sub lists are of type List_view (which was created for the
  # occasion) which is a stripped down version of List. it avoids creating many
  # methods that aren't needed which greatly improves performance (on 1000 elts:
  # bash x3, ksh x20, dash x5)
  local left="$(List_view_anonymous_id)"
  List_view "$left"
  "$left"_head__is "$head_"
  "$left"_tail__is "$node"
  local left_length="$mid_len"
  "$left"_length_is "$left_length"

  local right="$(List_view_anonymous_id)"
  List_view "$right"
  "$right"_head__is "$("$node"_next)"
  "$right"_tail__is "$tail_"
  local right_length="$((length - left_length))"
  "$right"_length_is "$right_length"

  "$left"_sort
  "$right"_sort

  local left_index=0
  local left_node="$("$left"_head_)"

  local right_index=0
  local right_node="$("$right"_head_)"

  local previous_node=
  local new_node=

  # Merge left and right lists
  while [ "$left_index" -lt "$left_length" ] &&
    [ "$right_index" -lt "$right_length" ]
  do
    # let's start with numbers only, python style __lt__ stuff might come later
    # but lexicographic test operators are not specified by POSIX, so this
    # might be a bit tricky to compare strings without an external binary (dash
    # supports > and <, but zsh for instance only allows it via [[, not [)
    if [ "$("$left_node"_value)" -lt "$("$right_node"_value)" ]; then
      new_node="$left_node"
      left_node="$("$left_node"_next)"
      left_index="$((left_index + 1))"
    else
      new_node="$right_node"
      right_node="$("$right_node"_next)"
      right_index="$((right_index + 1))"
    fi

    if [ -z "$previous_node" ]; then
      "$self"_head__is "$new_node"
      "$new_node"_previous_is ''
    else
      "$new_node"_previous_is "$previous_node"
      "$previous_node"_next_is "$new_node"
    fi

    previous_node="$new_node"
  done

  # potential remaining elements in left or right list
  if [ "$left_index" -lt "$left_length" ]; then
    "$left_node"_previous_is "$previous_node"
    "$previous_node"_next_is "$left_node"
    "$self"_tail__is "$("$left"_tail_)"
  elif [ "$right_index" -lt "$right_length" ]; then
    "$right_node"_previous_is "$previous_node"
    "$previous_node"_next_is "$right_node"
    "$self"_tail__is "$("$right"_tail_)"
  else
    "$self"_tail__is "$new_node"
  fi

  del "$left" # List_view doesn't have a "clear elements" hook on del
  del "$right"
}

List_append_node_() {
  if [ "$length" -eq 0 ]; then
    "$self"_head__is "$1"
  else
    "$1"_previous_is "$tail_"
    "$tail_"_next_is "$1"
  fi
  "$self"_tail__is "$1"
  "$self"_length_is "$((length + 1))"
}

List_remove_node_() {
  if [ "$length" -gt 1 ]; then
    if [ "$1" = "$tail_" ]; then
      local prev_node="$("$1"_previous)"
      "$self"_tail__is "$prev_node"
      "$prev_node"_next_is ''
    elif [ "$1" = "$head_" ]; then
      local next_node="$("$1"_next)"
      "$self"_head__is "$next_node"
      "$next_node"_previous_is ''
    else
      local prev_node="$("$1"_previous)"
      local next_node="$("$1"_next)"
      "$prev_node"_next_is "$next_node"
      "$next_node"_previous_is "$prev_node"
    fi
  fi
  del "$1"
  "$self"_length_is "$((length - 1))"
}

List__del__() {
  "$self"_clear
}

List__init__() {
  "$self"_length_is 0
  "$self"_append "$@"
}
