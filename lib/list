#!/bin/sh

if ! . ./clash 2> /dev/null; then
  echo 'Could not locate clash'
  exit 1
fi >&2

class Node \
  value    \
  next     \

class List       \
  head_          \
  length_        \
  tail_          \
  _append        \
  _clear         \
  _get           \
  _index         \
  _insert        \
  _pop           \
  _pretty_print  \
  _remove        \

check_index_within_range() {
  # 1 -> index
  # 2 -> length
  if [ -z "$1" ] ||
     [ "$1" -ge "$2" ] ||
     [ "$1" -le -"$2" ]
  then
    printf 'Invalid index: %s\n' "$1"
    return 1
  fi >&2
}

List_append() {
  local Node_generated_name
  Node _ "$1"
  if [ "$length_" -eq 0 ]; then
    "$self"_head__is "$Node_generated_name"
  else
    "$tail_"_next_is "$Node_generated_name"
  fi
  "$self"_tail__is "$Node_generated_name"
  "$self"_length__is "$((length_ + 1))"
}

List_index() {
  index=0
  node="$head_"
  while [ "$index" -lt "$length_" ]; do
    if [ "$("$node"_value; printf x)" = "$1"x ]; then
      printf '%s\n' "$index"
      return 0
    fi
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  printf 'Value not found: %s\n' "$1" >&2
  return 1
}

List_get() {
  check_index_within_range "$1" "$length_" || return

  if [ "$1" -lt 0 ]; then
    target_index="$((length_ + $1))"
  else
    target_index="$1"
  fi
  index=0
  node="$head_"
  while [ "$index" -lt "$target_index" ]; do
    node="$("$node"_next)"
    index="$((index + 1))"
  done

  value="$("$node"_value; printf x)"
  value="${value%x}"
  printf %s "$value"
}

List_pretty_print() {
  printf '== %s == (length: %s, head: %s, tail: %s)
' "$self" "$length_" "$([ -n "$head" ] && "$head_"_value)" \
                     "$([ -n "$tail" ] && "$tail_"_value)"
  index=0
  node="$head_"
  while [ "$index" -lt "$length_" ]; do
    value="$("$node"_value; printf x)"
    value="${value%x}"
    printf '%s: %s (%s)\n' "$index" "$value" "$node"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
}

List_remove() {
  index=0
  node="$head_"
  while [ "$index" -lt "$length_" ]; do
    if [ "$("$node"_value; printf x)" = "$1"x ]; then
      if [ "$node" = "$tail_" ]; then
        "$self"_tail__is "$prev"
        "$prev"_next_is ''
      elif [ "$node" = "$head_" ]; then
        "$self"_head__is "$("$node"_next)"
      else
        "$prev"_next_is "$("$node"_next)"
      fi
      del "$node"
      "$self"_length__is "$((length_ - 1))"
      return
    fi
    prev="$node"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  printf 'Value not found: %s\n' "$1" >&2
  return 1
}

List_pop() {
  set -- "${1-0}"
  check_index_within_range "$1" "$length_" || return

  if [ "$1" -lt 0 ]; then
    target_index="$((length_ + $1))"
  else
    target_index="$1"
  fi
  index=0
  node="$head_"
  while [ "$index" -lt "$target_index" ]; do
    prev="$node"
    node="$("$node"_next)"
    index="$((index + 1))"
  done

  if [ "$node" = "$tail_" ]; then
    "$self"_tail__is "$prev"
    "$prev"_next_is ''
  elif [ "$node" = "$head_" ]; then
    "$self"_head__is "$("$node"_next)"
  else
    "$prev"_next_is "$("$node"_next)"
  fi

  value="$("$node"_value; printf x)"
  value="${value%x}"
  "$self"_length__is "$((length_ - 1))"
  del "$node"
  printf %s "$value"
}

List_clear() {
  index=0
  node="$head_"
  while [ "$index" -lt "$length_" ]; do
    next="$("$node"_next)"
    del "$node"
    node="$next"
    index="$((index + 1))"
  done
  "$self"_head__is ''
  "$self"_tail__is ''
  "$self"_length__is 0
}

List_insert() {
  check_index_within_range "$1" "$length_" || return
  index=0
  node="$head_"
  prev=
  while [ "$index" -lt "$1" ]; do
    prev="$node"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  local Node_generated_name
  Node _ "$2" "$node"
  if [ -n "$prev" ]; then
    "$prev"_next_is "$Node_generated_name"
  fi
  if [ "$prev" = "$tail_" ]; then
    "$self"_tail__is "$Node_generated_name"
  elif [ "$node" = "$head_" ]; then
    "$self"_head__is "$Node_generated_name"
  fi
  "$self"_length__is "$((length_ + 1))"
}

_List() {
  shift # name
  "$self"_length__is 0
  for value do
    "$self"_append "$value"
  done
}
