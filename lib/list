#!/bin/sh

if ! [ -f ./clash ]; then
  echo 'Could not locate clash'
  exit 1
fi >&2

. ./clash

# TODO could save some iterations by making use of the double link properties

# List_node is also used by dict
class List_node \
  value         \
  next          \
  previous      \

class List       \
  head_          \
  length_        \
  tail_          \
  _append        \
  _clear         \
  _filter        \
  _find          \
  _foreach       \
  _get           \
  _index         \
  _insert        \
  _pop           \
  _pretty_print  \
  _print         \
  _remove        \
  _set           \
  _append_node_  \

check_index_within_range() {
  # 1 -> index
  # 2 -> length
  if [ -z "$1" ] ||
     [ "$1" -ge "$2" ] ||
     [ "$1" -le -"$2" ]
  then
    printf 'Invalid index: %s\n' "$1"
    return 1
  fi >&2
}

get_positive_index() {
  if [ "$1" -lt 0 ]; then
    printf %s "$((length_ + $1))"
  else
    printf %s "${1#-}" # remove - sign from -0
  fi
}

List_append() {
  "$local" node_id
  for value do
    node_id="$(List_node_id)"
    List_node "$node_id" "$value"
    "$self"_append_node_ "$node_id"
  done
}

List_clear() {
  index=0
  node="$head_"
  while [ "$index" -lt "$length_" ]; do
    next="$("$node"_next)"
    del "$node"
    node="$next"
    index="$((index + 1))"
  done
  "$self"_head__is ''
  "$self"_tail__is ''
  "$self"_length__is 0
}

List_filter() {
  "$local" new_list="$1"
  shift
  List "$new_list"
  "$local" index=0
  "$local" node="$head_"
  "$local" node_value
  while [ "$index" -lt "$length_" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    if "$@" "$node_value"; then
      "$new_list"_append "$node_value"
    fi
    node="$("$node"_next)"
    index="$((index + 1))"
  done
}

# Find a value matching a given predicate
List_find() {
  "$local" index=0
  "$local" node="$head_"
  "$local" node_value
  while [ "$index" -lt "$length_" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    if "$@" "$node_value"; then
      printf %s "$node_value"
      return 0
    fi
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  return 1
}

List_foreach() {
  "$local" index=0
  "$local" node="$head_"
  "$local" node_value
  while [ "$index" -lt "$length_" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    "$@" "$node_value"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
}

List_get() {
  check_index_within_range "$1" "$length_" || return
  "$local" target_index="$(get_positive_index "$1")"
  index=0
  node="$head_"
  while [ "$index" -lt "$target_index" ]; do
    node="$("$node"_next)"
    index="$((index + 1))"
  done

  value="$("$node"_value; printf x)"
  value="${value%x}"
  printf %s "$value"
}

List_index() {
  index=0
  node="$head_"
  while [ "$index" -lt "$length_" ]; do
    if [ "$("$node"_value; printf x)" = "$1"x ]; then
      printf %s "$index"
      return 0
    fi
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  printf 'Value not found: %s\n' "$1" >&2
  return 1
}

List_insert() {
  check_index_within_range "$1" "$((length_ + 1))" || return
  "$local" target_index="$(get_positive_index "$1")"
  index=0
  node="$head_"
  prev_node=
  while [ "$index" -lt "$target_index" ]; do
    prev_node="$node"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  "$local" node_id="$(List_node_id)"
  List_node "$node_id" "$2" "$node" "$prev_node"
  if [ -n "$prev_node" ]; then
    "$prev_node"_next_is "$node_id"
  fi
  if [ "$prev_node" = "$tail_" ]; then
    "$self"_tail__is "$node_id"
  elif [ "$node" = "$head_" ]; then
    "$self"_head__is "$node_id"
  fi
  "$self"_length__is "$((length_ + 1))"
}

List_pop() {
  set -- "${1-0}"
  check_index_within_range "$1" "$length_" || return
  "$local" target_index="$(get_positive_index "$1")"
  index=0
  node="$head_"
  while [ "$index" -lt "$target_index" ]; do
    prev_node="$node"
    node="$("$node"_next)"
    index="$((index + 1))"
  done

  next_node="$("$node"_next)"
  if [ "$node" = "$tail_" ]; then
    "$self"_tail__is "$prev_node"
    "$prev_node"_next_is ''
  elif [ "$node" = "$head_" ]; then
    "$self"_head__is "$next_node"
    "$next_node"_previous_is ''
  else
    "$prev_node"_next_is "$next_node"
    "$next_node"_previous_is "$prev_node"
  fi

  value="$("$node"_value; printf x)"
  value="${value%x}"
  "$self"_length__is "$((length_ - 1))"
  del "$node"
  printf %s "$value"
}

List_pretty_print() {
  printf '== %s == (length: %s, head: %s, tail: %s)
' "$self" "$length_" "$([ -n "$head_" ] && "$head_"_value)" \
                     "$([ -n "$tail_" ] && "$tail_"_value)"
  index=0
  node="$head_"
  while [ "$index" -lt "$length_" ]; do
    value="$("$node"_value; printf x)"
    value="${value%x}"
    printf '%s: %s (%s)\n' "$index" "$value" "$node"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
}

List_print() {
  (
    node_printer() {
      "$local" OLD_PATH="$PATH"
      PATH=
      if ! PATH="$OLD_PATH" "$1"_print 2> /dev/null; then
        PATH="$OLD_PATH"
        printf '%s' "$1"
      fi
      PATH="$OLD_PATH"
      "$local" tmp="${IFS#?}"
      "$local" delim="${IFS%$tmp}" # IFS first char is the print delim, like "$*"
      printf %s "${delim:- }" # Use a space if IFS is unset
    }
    "$self"_foreach node_printer
  )
  echo
}

List_remove() {
  index=0
  node="$head_"
  while [ "$index" -lt "$length_" ]; do
    if [ "$("$node"_value; printf x)" = "$1"x ]; then
      next_node="$("$node"_next)"
      if [ "$node" = "$tail_" ]; then
        "$self"_tail__is "$prev_node"
        "$prev_node"_next_is ''
      elif [ "$node" = "$head_" ]; then
        "$self"_head__is "$next_node"
        "$next_node"_previous_is ''
      else
        "$prev_node"_next_is "$next_node"
        "$next_node"_previous_is "$prev_node"
      fi
      del "$node"
      "$self"_length__is "$((length_ - 1))"
      return
    fi
    prev_node="$node"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  printf 'Value not found: %s\n' "$1" >&2
  return 1
}

List_set() {
  check_index_within_range "$1" "$length_" || return
  "$local" target_index="$(get_positive_index "$1")"
  index=0
  node="$head_"
  while [ "$index" -lt "$target_index" ]; do
    node="$("$node"_next)"
    index="$((index + 1))"
  done

  "$node"_value_is "$2"
}

List_append_node_() {
  "$1"_previous_is "$tail_"
  if [ "$length_" -eq 0 ]; then
    "$self"_head__is "$1"
  else
    "$tail_"_next_is "$1"
  fi
  "$self"_tail__is "$1"
  "$self"_length__is "$((length_ + 1))"
}

_List() {
  shift # name
  "$self"_length__is 0
  "$self"_append "$@"
}
