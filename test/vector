#!/bin/sh

. ./test/testlib/assert

. ./lib/vector

# Vector creation
assert_true Vector myvector 'abc' 'def' 'ghi' 'jkl' 'mno' -- 'Failed vector creation'
assert_out myvector_length_ -- 5

assert_out myvector_get 0 -- 'abc'
assert_out myvector_get -0 -- 'abc'
assert_out myvector_index 'abc' -- 0
assert_out myvector_get 1 -- 'def'
assert_out myvector_get -4 -- 'def'
assert_out myvector_index 'def' -- 1
assert_out myvector_get 2 -- 'ghi'
assert_out myvector_get -3 -- 'ghi'
assert_out myvector_index 'ghi' -- 2
assert_out myvector_get 3 -- 'jkl'
assert_out myvector_get -2 -- 'jkl'
assert_out myvector_index 'jkl' -- 3
assert_out myvector_get 4 -- 'mno'
assert_out myvector_get -1 -- 'mno'
assert_out myvector_index 'mno' -- 4

assert_out myvector_print -- 'abc def ghi jkl mno 
'

# Append elt
assert_true myvector_append 'pql' -- 'Failed to append element'
assert_out myvector_length_ -- 6
assert_out myvector_get 5 -- 'pql'
assert_out myvector_print -- 'abc def ghi jkl mno pql 
'

# Insert middle elt
assert_true myvector_insert 2 'middle' -- 'Failed to insert middle element'
assert_out myvector_length_ -- 7
assert_out myvector_print -- 'abc def middle ghi jkl mno pql 
'

assert_true myvector_insert 0 'begin' -- 'Failed to insert element at the start'
assert_out myvector_length_ -- 8
assert_out myvector_print -- 'begin abc def middle ghi jkl mno pql 
'

assert_true myvector_insert 8 'end' -- 'Failed to insert element at the end'
assert_out myvector_length_ -- 9
myvector_pretty_print
assert_out myvector_print -- 'begin abc def middle ghi jkl mno pql end 
'

# Remove middle elt
assert_out myvector_get 3 -- 'middle'
assert_true myvector_remove 'middle' -- 'Failed to remove middle element'
assert_out myvector_get 3 -- 'ghi'
assert_out myvector_length_ -- 8
assert_out myvector_print -- 'begin abc def ghi jkl mno pql end 
'

assert_out myvector_get 0 -- 'begin'
assert_true myvector_remove 'begin' -- 'Failed to remove head element'
assert_out myvector_get 0 -- 'abc'
assert_out myvector_length_ -- 7
assert_out myvector_print -- 'abc def ghi jkl mno pql end 
'

assert_out myvector_get -1 -- 'end'
assert_out myvector_get 6 -- 'end'
assert_true myvector_remove 'end' -- 'Failed to remove tail element'
assert_out myvector_length_ -- 6
assert_out myvector_get -1 -- 'pql'
assert_out myvector_get 5 -- 'pql'
assert_out myvector_print -- 'abc def ghi jkl mno pql 
'

# Pop middle elt
assert_out myvector_get 2 -- 'ghi'
assert_out myvector_pop 2 -- 'ghi'
assert_out myvector_length_ -- 5
assert_out myvector_get 2 -- 'jkl'
assert_out myvector_print -- 'abc def jkl mno pql 
'

assert_out myvector_get 0 -- 'abc'
assert_out myvector_pop 0 -- 'abc'
assert_out myvector_length_ -- 4
assert_out myvector_get 0 -- 'def'
assert_out myvector_print -- 'def jkl mno pql 
'

assert_out myvector_get -1 -- 'pql'
assert_out myvector_get 3 -- 'pql'
assert_out myvector_pop -1 -- 'pql'
assert_out myvector_length_ -- 3
assert_out myvector_get -1 -- 'mno'
assert_out myvector_get 2 -- 'mno'
assert_out myvector_print -- 'def jkl mno 
'

# Change existing element value
myvector_set 1 foo
assert_out myvector_length_ -- 3
assert_out myvector_print -- 'def foo mno 
'

# Check print uses the first char of the IFS to separate elements
OLD_IFS="$IFS"
IFS=',/:'
assert_out myvector_print -- 'def,foo,mno,
'
# Same behavior when IFS has a single char
IFS=':'
assert_out myvector_print -- 'def:foo:mno:
'
IFS=
# When IFS is empty or unset the default should be space
assert_out myvector_print -- 'def foo mno 
'
unset IFS
assert_out myvector_print -- 'def foo mno 
'
IFS="$OLD_IFS"

# Append multiple values
assert_true myvector_append 'funk' 'folk' -- 'Failed to append multiple elts'
assert_out myvector_length_ -- 5
assert_out myvector_print -- 'def foo mno funk folk 
'

# Print every value with foreach
assert_out myvector_foreach printf '%s, ' -- 'def, foo, mno, funk, folk, '

# Foreach should return 0 even if the calls do not
assert_true myvector_foreach false -- 'Failed to return true for non-zero calls'

# Find first value matching condition
regex_match() {
  expr "$2" : "$1" > /dev/null
}

assert_out myvector_find test folk = -- 'folk'
assert_out myvector_find regex_match 'f.*' -- 'foo'

# Failure to find a value matching the condition must return a non-zero value
assert_false myvector_find false -- 'Find failed to return a non-zero value'

# Create a new vector with all values matching the condition
assert_true myvector_filter filtered_vector regex_match 'f.*' -- 'Failed to filter'
assert_out filtered_vector_print -- 'foo funk folk 
'
assert_out filtered_vector_length_ -- 3

# Check that filtering with a non matching condition creates an empty vector
assert_true myvector_filter filtered_vector_no_match false -- 'Failed to filter'
assert_out filtered_vector_no_match_length_ -- 0

assert_true myvector_clear -- 'Failed to clear'
assert_out myvector_length_ -- 0

# Check deletion
assert_true del myvector -- 'Failed to delete vector'
assert_false myvector_append 'hey' -- 'Failed to properly delete methods'

# Check print method call underlying object print method
class Car \
  speed   \
  _print  \

Car_print () {
  printf '%s: %s km/h' "$self" "$speed"
}

Car foo 100
Car bar 200
Car baz 150
Vector mycars foo bar baz

OLD_IFS="$IFS"
IFS='
'
assert_out mycars_print -- 'foo: 100 km/h
bar: 200 km/h
baz: 150 km/h

'
IFS="$OLD_IFS"
