#!/bin/sh

. "${CLASH_ROOT-.}"/test/testlib/assert || exit
. "${CLASH_ROOT-.}"/clash || exit
. "${CLASH_ROOT-.}"/lib/dict || exit

# FIXME missing a bunch of test cases

assert_true Dict mydict -- 'Failed object creation'

assert_true mydict_set 'France' 'Paris' -- 'Failed to insert a new key/value'
assert_true mydict_set 'England' 'London' -- 'Failed to insert a new key/value'
assert_true mydict_set 'Spain' 'Madrid' -- 'Failed to insert a new key/value'
assert_true mydict_set 'Canada' 'Ottawa' -- 'Failed to insert a new key/value'
assert_true mydict_set 'USA' 'Washington' -- 'Failed to insert a new key/value'

assert_out mydict_get 'England' -- 'London'
assert_out mydict_get 'USA' -- 'Washington'
assert_out mydict_get 'Spain' -- 'Madrid'

# 1st one is to check no hash hit, 2nd one is to check hash hit but no match
# found while iterating over the bucket.
# FIXME this is currently bound to the hash function used in the current
# implementation, the hash function should be set from the tests to be able to
# have something robust.
assert_false mydict_get 'something' -- 'Non-existing key'
assert_false mydict_get 'a' -- 'Non-existing key'

assert_false mydict_remove 'something' -- 'Removing a non-existing key should fail'
assert_true mydict_remove 'Spain' -- 'Removal failed'
assert_false mydict_get 'Spain' -- 'Key should not exist anymore'

# need to verify inserting twice the same key+value has no effect
assert_out mydict_length -- 4
assert_true mydict_set 'Canada' 'Ottawa' -- 'Setting an already existing value should still return true'
assert_out mydict_length -- 4
mydict_pretty_print

assert_true mydict_items items -- 'Failed to fetch items'
assert_out items_print -- '(France, Paris) (England, London) (USA, Washington) (Canada, Ottawa) 
'

assert_true mydict_clear -- 'Failed to clear'
assert_out mydict_length -- 0
assert_true mydict_items items -- 'Failed to fetch items'
assert_true items_is_empty -- 'Items should be empty'

end_tests
