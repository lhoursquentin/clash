#!/bin/sh

if ! [ -f "${CLASH_ROOT-.}"/lib/list ]; then
  echo 'Could not locate lib/list'
  exit 1
fi >&2

. "${CLASH_ROOT-.}"/lib/list

class Test              \
  checker_list_         \
  checkers_report_file_ \
  cmd_list_             \
  description_          \
  err_file_             \
  out_file_             \
  ret_val_              \
  err_equal             \
  err_not_equal         \
  err_not_regex         \
  err_regex             \
  out_equal             \
  out_not_equal         \
  out_not_regex         \
  out_regex             \
  ret_equal             \
  ret_not_equal         \
  _check_err_equal      \
  _check_err_not_equal  \
  _check_err_not_regex  \
  _check_err_regex      \
  _check_out_equal      \
  _check_out_not_equal  \
  _check_out_not_regex  \
  _check_out_regex      \
  _check_ret_equal      \
  _check_ret_not_equal  \
  _run                  \
  _check_failed_        \
  __init__              \
  __setattr__           \

Test_check_err_equal() {
  printf %s "$err_equal" | diff - "$err_file_"
}

Test_check_err_not_equal() {
  ! { printf %s "$err_not_equal" | diff - "$err_file_"; }
}

Test_check_err_not_regex() {
  if grep -q "$err_not_regex" "$err_file_"; then
    printf 'Found %s regex in:\n' "$err_not_regex"
    cat "$err_file_"
    return 1
  fi
}

Test_check_err_regex() {
  if ! grep -q "$err_regex" "$err_file_"; then
    printf '%s regex not found in:\n' "$err_regex"
    cat "$err_file_"
    return 1
  fi
}

Test_check_out_equal() {
  printf %s "$out_equal" | diff - "$out_file_"
}

Test_check_out_not_equal() {
  ! { printf %s "$out_not_equal" | diff - "$out_file_"; }
}

Test_check_out_not_regex() {
  if grep -q "$out_not_regex" "$out_file_"; then
    printf 'Found %s regex in:\n' "$out_not_regex"
    cat "$out_file_"
    return 1
  fi
}

Test_check_out_regex() {
  if ! grep -q "$out_regex" "$out_file_"; then
    printf '%s regex not found in:\n' "$out_regex"
    cat "$out_file_"
    return 1
  fi
}

Test_check_ret_equal() {
  if [ "$ret_val_" -ne "$ret_equal" ]; then
    printf 'Cmd exit status was %s instead of %s\n' "$ret_val_" "$ret_equal"
    return 1
  fi
}

Test_check_ret_not_equal() {
  if [ "$ret_val_" -eq "$ret_not_equal" ]; then
    printf 'Cmd exit status was %s\n' "$ret_val_"
    return 1
  fi
}

Test__init__() {
  "$local" cmd_list_id="$(List_anonymous_id)"
  List "$cmd_list_id" "$@"
  "$local" checker_list_id="$(List_anonymous_id)"
  List "$checker_list_id"
  "$self"_checker_list__is "$checker_list_id"
  "$self"_cmd_list__is "$cmd_list_id"
  # FIXME mktemp is not POSIX, this restricts the portability of the testsuite
  "$self"_checkers_report_file__is "$(mktemp)"
  "$self"_err_file__is "$(mktemp)"
  "$self"_out_file__is "$(mktemp)"
}

Test__setattr__() {
  case "$1" in
    # FIXME dirty
    *equal|*regex)
      "$checker_list_"_append "$1"
      ;;
  esac
}

Test_check_failed_() {
  printf '\e[0;34mVerification\e[0m - %s\n' "$1"
  ! "$self"_check_"$1"
}

Test_run() {
  "$local" index=0
  "$local" node="$("$cmd_list_"_head_)"
  "$local" node_value
  while [ "$index" -lt "$("$cmd_list_"_length_)" ]; do
    node_value="$("$node"_value; printf x)"
    node_value="${node_value%x}"
    set -- "$@" "$node_value"
    node="$("$node"_next)"
    index="$((index + 1))"
  done
  printf '\e[1;37m|\e[0m \e[1m%s\e[0m - %s' "$self" "$*"
  "$@" > "$out_file_" 2> "$err_file_"
  "$self"_ret_val__is "$?"
  if "$checker_list_"_is_empty; then
    "$self"_ret_equal_is 0
  fi
  "$checker_list_"_filter failed_checkers "$self"_check_failed_ > "$checkers_report_file_" 2>&1
  rm "$out_file_" "$err_file_"
  if failed_checkers_is_empty; then
    printf ' - \e[1;32mOK\e[0m\n'
  else
    printf ' - \e[1;31mKO\e[0m\n'
    return 1
  fi
}

class Test_suite  \
  results_        \
  tests_          \
  _add            \
  _add_quick_test \
  _run            \
  __init__        \

Test_suite__init__() {
  "$local" test_list_id="$(List_anonymous_id)"
  List "$test_list_id"
  "$self"_tests__is "$test_list_id"
}

Test_suite_add() {
  "$tests_"_append "$@"
}

Test_suite_add_quick_test() {
  "$local" test_id="$(Test_anonymous_id)"
  Test "$test_id" "$@"
  "$tests_"_append "$test_id"
}

# return false if test passed since we want to filter failed tests
run_test_helper() {
  "$1"_run
  [ "$?" -ne 0 ]
}

print_report_helper() {
  printf '\e[1;37mX\e[0m \e[0;31mFailed test report\e[0m - \e[1m%s\e[0m\n' "$1"
  printf '> \e[1mCommand\e[0m - '
  "$("$1"_cmd_list_)"_print
  sed 's/.*/  &/' "$("$1"_checkers_report_file_)"
}

Test_suite_run() {
  printf '\e[1;37m>\e[0m \e[1;35mRunning\e[0m - \e[1;34m%s\e[0m\n' "$self"
  "$tests_"_filter failed_tests run_test_helper
  printf '\e[1;37m=\e[0m \e[1;35mReport\e[0m - \e[1;34m%s\e[0m\n' "$self"
  if failed_tests_is_empty; then
    printf '\e[1;32mPASS\e[0m - %s passed\n' "$("$tests_"_length_)"
  else
    printf '\e[1;31mFAIL\e[0m - %s/%s failed\n' "$(failed_tests_length_)" "$("$tests_"_length_)"
    failed_tests_foreach print_report_helper
  fi
}
